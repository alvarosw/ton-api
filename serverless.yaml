service: ton-api

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    COUNTER_API_URL: ${env:COUNTER_API_URL}
    COUNTER_NAMESPACE: ${env:COUNTER_NAMESPACE}
    COUNTER_KEY: ${env:COUNTER_KEY}

custom:
  usersTableName: users-table-${self:provider.stage}

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript
  - serverless-dotenv-plugin

functions:
  getUser:
    handler: src/users/handlers.getUser
    name: getUser
    memorySize: 1024
    timeout: 20
    events:
      - http:
          path: users/{userId}
          method: GET
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:GetItem'
        Resource: !GetAtt UsersTable.Arn
  createUser:
    handler: src/users/handlers.createUser
    name: createUser
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: users
          method: POST
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - 'dynamodb:PutItem'
        Resource: !GetAtt UsersTable.Arn
  getCount:
    handler: src/visits/handlers.getCount
    name: getCount
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: visits
          method: GET
  hitCount:
    handler: src/visits/handlers.hitCount
    name: hitCount
    memorySize: 128
    timeout: 10
    events:
      - http:
          path: visits
          method: POST
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
