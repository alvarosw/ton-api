service: ton-api
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: ${opt:stage, 'dev'}
  tags: 
    name: ton-api
    stage: ${opt:stage, 'dev'}
  region: us-east-1
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    COUNTER_API_URL: ${env:COUNTER_API_URL, 'https://api.countapi.xyz'}
    COUNTER_NAMESPACE: ${env:COUNTER_NAMESPACE, 'ton-site.com'}
    COUNTER_KEY: ${env:COUNTER_KEY, 'visits'}
    JWT_SECRET: ${env:JWT_SECRET, 'supersecret'}
    TOKEN_EXPIRATION_HOURS: ${env:TOKEN_EXPIRATION_HOURS, '24'}

package:
  individually: true
  patterns:
    - "./build/src/utils/*.js"

custom:
  # swagger
  autoswagger:
    title: Ton API
    typefiles:
      - "./src/types/user.d.ts"
    apiKeyHeaders:
      - "Authorization"
    apiType: http
    host: ${self:custom.swaggerHost.${self:provider.stage}}
    useStage: false
    excludeStages: 
      - "prd"
  swaggerHost:
    local: localhost:3000/local
    dev: z0lmzmahfg.execute-api.us-east-1.amazonaws.com/dev
  
  # tables
  usersTableName: ton-users-table-${self:provider.stage}

plugins:
  - serverless-auto-swagger
  - serverless-iam-roles-per-function
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-plugin-common-excludes
  - serverless-plugin-include-dependencies

functions:
  - ${file(./src/middleware/middleware-configs.yml)}
  - ${file(./src/functions/auth/auth-functions.yml)}
  - ${file(./src/functions/users/users-functions.yml)}
  - ${file(./src/functions/visits/visits-functions.yml)}

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
